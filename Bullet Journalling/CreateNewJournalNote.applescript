--
--	Created by: Stephen Schwetz
--	Created on: 05/07/22
--
--	Copyright © 2022 Stephen Schwetz, All Rights Reserved
--
use AppleScript version "2.5"
use scripting additions

-- import scripts from library
use script "CalendarLib EC" version "1.1.5"
use DateTime : script "DateTime"


(*
-- Versions
1.1 Build 0007:	Fixed up All Day Meeting Formatting Error
									Started Reformatting and Tidying Code for readability
									Started moving functionality into handlers
1.1 Build 1: 			Moved to use CalendarEC
1.0 Build 0009: 	Fixed up Meeting list not containing all meetins
1.0 Build 0002: 	Initial release
*)

on run
	-- Use following Calendars 
	set theCalendarsList to {"Calendar", "Family", "Stephen's Calendar", "Stephen and Emma"}
	-- Set the date string to YYYY-MM-DD
	set datestring to DateTime's getISODate(current date)
	-- set today to start at midnight
	set today to current date
	set time of today to 0
	set tomorrow to (today) + 1 * days
	
	set theNoteBody to "<h1>" & datestring & ": Daily Log</h1><sub>Generated by CreateNewJournalNote on " & (current date) & "</sub><p>"
	-- set theNoteBody to "<h1>" & dateString & ": Daily Log</h1><div font-variant-position: sub>Generated by CreateNewJournalNote by Stephen Schwetz</div><div font-variant-position: super>Generated at " & (current date) & "</div><p><h2>Overdue / Due Task:</h2><p><ul>"
	
	
	-- define local variables
	local theDueTasksInitialIterationDone
	local theGeneralTasksInitialIterationDone
	
	-- initialise variables
	set theDueTasksInitialIterationDone to false
	set theGeneralTasksInitialIterationDone to false
	
	-- Get the list of outstanding Reminders
	tell application "Reminders"
		set myList to list "HPE"
		--	set theNames to the name of every reminder
		tell myList
			set the theReminders to (every reminder whose completed is not true)
			repeat with aReminder in theReminders
				--if aReminder is not "completed" then
				set aduedate to due date of aReminder
				set apriority to priority of aReminder
				
				-- no reminder priority set
				if apriority = 0 then
					set theReminderPriority to " -"
					-- high priority set
				else if apriority ≥ 1 and apriority ≤ 4 then
					set theReminderPriority to "!!"
					-- medium priority set
				else if apriority is 5 then
					set theReminderPriority to " !"
					-- low priority set
				else if apriority ≥ 6 and apriority ≤ 9 then
					set theReminderPriority to "¡¡"
				end if
				
				-- if overdue today add to Due/OverDue and make it red to stand out
				if (aduedate < today) then
					if not theDueTasksInitialIterationDone then
						set theDueHtml to "<p><h2>To Do:</h2><p><ul>"
						set theDueTasksInitialIterationDone to true
					end if
					set aReminderName to name of aReminder as string
					set theDueHtml to theDueHtml & "<li style=\"color:red\">" & theReminderPriority & " " & aReminderName & "</li>"
					-- if due today
				else if (aduedate > today and aduedate < tomorrow) then
					if not theDueTasksInitialIterationDone then
						set theDueHtml to "<p><h2>Due / Overdue Task(s)</h2><p><ul>"
						set theDueTasksInitialIterationDone to true
					end if
					set aReminderName to name of aReminder as text
					set theDueHtml to theDueHtml & "<li>" & aReminderName & "</li>"
					-- this is a general todo item
				else
					if not theGeneralTasksInitialIterationDone then
						set theGeneralHtml to "<h2>To Do:(s):</h2><p><ul>"
						set theGeneralTasksInitialIterationDone to true
					end if
					set aReminderName to name of aReminder as string
					set theGeneralHtml to theGeneralHtml & "<li> " & aReminderName & "</li>"
				end if
			end repeat
		end tell
	end tell
	
	if theDueTasksInitialIterationDone then
		set theNoteBody to theNoteBody & theDueHtml & "</ul>"
	end if
	if theGeneralTasksInitialIterationDone then
		set theNoteBody to theNoteBody & theGeneralHtml & "</ul>"
	end if
	
	set theNoteBody to theNoteBody & "<p>"
	
	-- Get the Calendar Items for Today
	set theNoteBody to theNoteBody & "</ul><p><h2>Meetings:</h2><p>"
	--
	set theNoteBody to theNoteBody & getEventsHtmlList(theCalendarsList, today, tomorrow)
	
	tell application "Notes"
		tell account "icloud"
			tell folder "HPE"
				try
					set theNote to make new note at folder "3. Journal" with properties {name:datestring & ": HPE Daily Log", body:theNoteBody}
					show theNote
				end try
			end tell
		end tell
	end tell
end run

on getEventsHtmlList(theCalendarsList as list, theStartDate as date, theEndDate as date)
	--declare local variable
	local theStore
	local theCalendars
	local theEvents
	local anEvent
	local anEventInfo
	local anAllDayEvent
	local anEventSummary
	local anEventStart
	local anEventEnd
	local theAllDayEventsInitialIterationDone
	local theGeneralEventsInitialIterationDone
	local theAllDayEventsHtml
	local theGeneralEventsHtml
	local theFinalHtml
	
	--initialise the values
	set theStore to missing value
	set theCalendars to missing value
	set theEvents to missing value
	set anEvent to missing value
	set anEventInfo to missing value
	set anAllDayEvent to missing value
	set anEventSummary to missing value
	set theAllDaylEventsInitialIterationDone to false
	set theGeneralEventsInitialIterationDone to false
	set theAllDayEventsHtml to missing value
	set theGeneralEventsHtml to missing value
	set theFinalHtml to "" as text
	set event_end_date to missing value
	set event_start_date to missing value
	
	--try
	-- connect to the calendar store
	set theStore to fetch store
	-- fetch the calendars
	set theCalendars to fetch calendars theCalendarsList event store theStore
	--fetch the events from theCalendars
	set theEvents to fetch events starting date theStartDate ending date theEndDate searching cals theCalendars event store theStore
	-- iterate through theEvents 
	repeat with anEvent in theEvents
		--get the event info
		set anEventInfo to event info for event anEvent
		--get the portions of the info that we require
		set anAllDayEvent to all_day of anEventInfo
		set anEventSummary to event_summary of anEventInfo
		set anEventStart to DateTime's getTime(event_start_date of anEventInfo)
		set anEventEnd to DateTime's getTime(event_end_date of anEventInfo)
		
		-- if this is an allday event we will add it to a seperate list so that we can put it at the top of the list with a different format
		if anAllDayEvent then
			-- if we have not run throught this block yet
			if not theAllDaylEventsInitialIterationDone then
				-- start an unnumbered list
				set theAllDayEventsHtml to "<ul>"
				set theAllDaylEventsInitialIterationDone to true
			end if
			-- add the event to the list of all day events
			set theAllDayEventsHtml to theAllDayEventsHtml & "<li>All Day - " & anEventSummary & "</li>"
		else
			-- this is a standard event
			-- if this is the first iteration of this type
			if not theGeneralEventsInitialIterationDone then
				-- Create an unumbered List
				set theGeneralEventsHtml to "<ul>"
				set theGeneralEventsInitialIterationDone to true
			end if
			-- add the event to the list of gereral events
			set theGeneralEventsHtml to theGeneralEventsHtml & "<li>" & anEventStart & " to " & anEventEnd & " - " & anEventSummary & "</li>"
		end if
	end repeat
	-- if there are all day events
	if theAllDaylEventsInitialIterationDone then
		-- add events to theFinalHTML and close the unnumbered list
		set theFinalHtml to theAllDayEventsHtml & "</ul>"
	end if
	-- if there is allday and general events then append with theFinalHtml
	if theAllDaylEventsInitialIterationDone and theGeneralEventsInitialIterationDone then
		-- add events to theFinalHTML appending to the end of the Final HTML
		set theFinalHtml to theFinalHtml & theGeneralEventsHtml & "</ul>"
		-- if only general events add events to theFinalHTML and close the unnumbered list
	else if theGeneralEventsInitialIterationDone then
		set theFinalHtml to theGeneralEventsHtml & "</ul>"
	end if
	-- return the html to the caller
	return theFinalHtml
	--	on error	
	--		return missing value
	--	end try
end getEventsHtmlList



(*
                    GNU GENERAL PUBLIC LICENSE
                       Version 3, 29 June 2007

 Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>
 Everyone is permitted to copy and distribute verbatim copies
 of this license document, but changing it is not allowed.

                            Preamble

  The GNU General Public License is a free, copyleft license for
software and other kinds of works.

  The licenses for most software and other practical works are designed
to take away your freedom to share and change 